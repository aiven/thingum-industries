// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     machine_sensor.avsc
 */
package avro

import (
	"io"

	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type MachineSensor struct {
	// The machine whose sensor this is
	Machine string `json:"machine"`
	// Which sensor was read
	Sensor string `json:"sensor"`
	// Sensor reading
	Value float32 `json:"value"`
	// Measurement units
	Units string `json:"units"`
}

const MachineSensorAvroCRC64Fingerprint = "Æ¥\xa3\xb2/\x82Y\xe7"

func NewMachineSensor() *MachineSensor {
	return &MachineSensor{}
}

func DeserializeMachineSensor(r io.Reader) (*MachineSensor, error) {
	t := NewMachineSensor()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeMachineSensorFromSchema(r io.Reader, schema string) (*MachineSensor, error) {
	t := NewMachineSensor()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeMachineSensor(r *MachineSensor, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Machine, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Sensor, w)
	if err != nil {
		return err
	}
	err = vm.WriteFloat(r.Value, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Units, w)
	if err != nil {
		return err
	}
	return err
}

func (r *MachineSensor) Serialize(w io.Writer) error {
	return writeMachineSensor(r, w)
}

func (r *MachineSensor) Schema() string {
	return "{\"fields\":[{\"doc\":\"The machine whose sensor this is\",\"name\":\"machine\",\"type\":\"string\"},{\"doc\":\"Which sensor was read\",\"name\":\"sensor\",\"type\":\"string\"},{\"doc\":\"Sensor reading\",\"name\":\"value\",\"type\":\"float\"},{\"doc\":\"Measurement units\",\"name\":\"units\",\"type\":\"string\"}],\"name\":\"io.aiven.example.MachineSensor\",\"type\":\"record\"}"
}

func (r *MachineSensor) SchemaName() string {
	return "io.aiven.example.MachineSensor"
}

func (_ *MachineSensor) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *MachineSensor) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *MachineSensor) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *MachineSensor) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *MachineSensor) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *MachineSensor) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *MachineSensor) SetString(v string)   { panic("Unsupported operation") }
func (_ *MachineSensor) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MachineSensor) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Machine}
	case 1:
		return &types.String{Target: &r.Sensor}
	case 2:
		return &types.Float{Target: &r.Value}
	case 3:
		return &types.String{Target: &r.Units}
	}
	panic("Unknown field index")
}

func (r *MachineSensor) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *MachineSensor) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *MachineSensor) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MachineSensor) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *MachineSensor) Finalize()                        {}

func (_ *MachineSensor) AvroCRC64Fingerprint() []byte {
	return []byte(MachineSensorAvroCRC64Fingerprint)
}
